<VirtualHost *:80>
	ServerName wiki.cpgworld.net

	RewriteEngine On
	RewriteCond %{HTTPS} off
	RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
	RewriteCond %{SERVER_NAME} =wiki.cpgworld.net
	RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
</VirtualHost>
<VirtualHost *:443>
	ServerAdmin webmaster@localhost
	ServerName wiki.cpgworld.net
	DocumentRoot /var/www/BookStack/public/

	<Directory /var/www/BookStack/public/>
		RewriteEngine on
		Options indexes followsymlinks
		Require all granted

		<IfModule mod_rewrite.c>
			<IfModule mod_negotiation.c>
				Options -MultiViews -Indexes
			</IfModule>

			RewriteEngine On

			# Handle Authorization Header
			RewriteCond %{HTTP:Authorization} .
			RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

			# Redirect Trailing Slashes If Not A Folder...
			RewriteCond %{REQUEST_FILENAME} !-d
			RewriteCond %{REQUEST_URI} (.+)/$
			RewriteRule ^ %1 [L,R=301]

			# Handle Front Controller...
			RewriteCond %{REQUEST_FILENAME} !-d
			RewriteCond %{REQUEST_FILENAME} !-f
			RewriteRule ^ index.php [L]
		</IfModule>
	</Directory>

	# available loglevels: trace8, ..., trace1, debug, info, notice, warn,
	# error, crit, alert, emerg.
	# it is also possible to configure the loglevel for particular
	# modules, e.g.
	#loglevel info ssl:warn

	errorlog /var/log/apache2/error.log
	customlog /var/log/apache2/access.log combined

	# for most configuration files from conf-available/, which are
	# enabled or disabled at a global level, it is possible to
	# include a line for only one particular virtual host. for example the
	# following line enables the cgi configuration for this host only
	# after it has been globally disabled with "a2disconf".
	#include conf-available/serve-cgi-bin.conf

	#   ssl engine switch:
	#   enable/disable ssl for this virtual host.
	sslengine on
	#sslprotocol -all +tlsv1.2 +tlsv1.3
	#sslciphersuite	ecdhe-ecdsa-aes128-gcm-sha256:ecdhe-rsa-aes128-gcm-sha256:ecdhe-ecdsa-aes256-gcm-sha384:ecdhe-rsa-aes256-gcm-sha384:ecdhe-ecdsa-chacha20-poly1305:ecdhe-rsa-chacha20-poly1305:dhe-rsa-aes128-gcm-sha256:dhe-rsa-aes256-gcm-sha384:dhe-rsa-chacha20-poly1305
	#sslhonorcipherorder off
	#sslsessiontickets off
	#traceenable off
	<files ".ht*">
		require all denied
	</files>
	limitrequestbody 0

	#   a self-signed (snakeoil) certificate can be created by installing
	#   the ssl-cert package. see
	#   /usr/share/doc/apache2/readme.debian.gz for more info.
	#   if both key and certificate are stored in the same file, only the
	#   sslcertificatefile directive is needed.
	sslcertificatefile      /etc/letsencrypt/live/wiki.cpgworld.net/fullchain.pem
	sslcertificatekeyfile	/etc/letsencrypt/live/wiki.cpgworld.net/privkey.pem

	#   server certificate chain:
	#   point sslcertificatechainfile at a file containing the
	#   concatenation of pem encoded ca certificates which form the
	#   certificate chain for the server certificate. alternatively
	#   the referenced file can be the same as sslcertificatefile
	#   when the ca certificates are directly appended to the server
	#   certificate for convinience.
	#sslcertificatechainfile /etc/apache2/ssl.crt/server-ca.crt

	#   certificate authority (ca):
	#   set the ca certificate verification path where to find ca
	#   certificates for client authentication or alternatively one
	#   huge file containing all of them (file must be pem encoded)
	#   note: inside sslcacertificatepath you need hash symlinks
	#	  to point to the certificate files. use the provided
	#	  makefile to update the hash symlinks after changes.
	#sslcacertificatepath /etc/ssl/certs/
	#sslcacertificatefile /etc/apache2/ssl.crt/ca-bundle.crt

	#   certificate revocation lists (crl):
	#   set the ca revocation path where to find ca crls for client
	#   authentication or alternatively one huge file containing all
	#   of them (file must be pem encoded)
	#   note: inside sslcarevocationpath you need hash symlinks
	#	  to point to the certificate files. use the provided
	#	  makefile to update the hash symlinks after changes.
	#sslcarevocationpath /etc/apache2/ssl.crl/
	#sslcarevocationfile /etc/apache2/ssl.crl/ca-bundle.crl

	#   client authentication (type):
	#   client certificate verification type and depth.  types are
	#   none, optional, require and optional_no_ca.  depth is a
	#   number which specifies how deeply to verify the certificate
	#   issuer chain before deciding the certificate is not valid.
	#sslverifyclient require
	#sslverifydepth  10

	#   ssl engine options:
	#   set various options for the ssl engine.
	#   o fakebasicauth:
	#    translate the client x.509 into a basic authorisation.  this means that
	#    the standard auth/dbmauth methods can be used for access control.  the
	#    user name is the `one line' version of the client's x.509 certificate.
	#    note that no password is obtained from the user. every entry in the user
	#    file needs this password: `xxj31zmtzzkva'.
	#   o exportcertdata:
	#    this exports two additional environment variables: ssl_client_cert and
	#    ssl_server_cert. these contain the pem-encoded certificates of the
	#    server (always existing) and the client (only existing when client
	#    authentication is used). this can be used to import the certificates
	#    into cgi scripts.
	#   o stdenvvars:
	#    this exports the standard ssl/tls related `ssl_*' environment variables.
	#    per default this exportation is switched off for performance reasons,
	#    because the extraction step is an expensive operation and is usually
	#    useless for serving static content. so one usually enables the
	#    exportation for cgi and ssi requests only.
	#   o optrenegotiate:
	#    this enables optimized ssl connection renegotiation handling when ssl
	#    directives are used in per-directory context.
	#ssloptions +fakebasicauth +exportcertdata +strictrequire
	<filesmatch "\.(?:cgi|shtml|phtml|php)$">
		ssloptions +stdenvvars
	</filesmatch>
	<directory /usr/lib/cgi-bin>
		ssloptions +stdenvvars
	</directory>

	#   ssl protocol adjustments:
	#   the safe and default but still ssl/tls standard compliant shutdown
	#   approach is that mod_ssl sends the close notify alert but doesn't wait for
	#   the close notify alert from client. when you need a different shutdown
	#   approach you can use one of the following variables:
	#   o ssl-unclean-shutdown:
	#    this forces an unclean shutdown when the connection is closed, i.e. no
	#    ssl close notify alert is send or allowed to received.  this violates
	#    the ssl/tls standard but is needed for some brain-dead browsers. use
	#    this when you receive i/o errors because of the standard approach where
	#    mod_ssl sends the close notify alert.
	#   o ssl-accurate-shutdown:
	#    this forces an accurate shutdown when the connection is closed, i.e. a
	#    ssl close notify alert is send and mod_ssl waits for the close notify
	#    alert of the client. this is 100% ssl/tls standard compliant, but in
	#    practice often causes hanging connections with brain-dead browsers. use
	#    this only for browsers where you know that their ssl implementation
	#    works correctly.
	#   notice: most problems of broken clients are also related to the http
	#   keep-alive facility, so you usually additionally want to disable
	#   keep-alive for those clients, too. use variable "nokeepalive" for this.
	#   similarly, one has to force some clients to use http/1.0 to workaround
	#   their broken http/1.1 implementation. use variables "downgrade-1.0" and
	#   "force-response-1.0" for this.
	# browsermatch "msie [2-6]" \
	#	nokeepalive ssl-unclean-shutdown \
	#	downgrade-1.0 force-response-1.0

</VirtualHost>
